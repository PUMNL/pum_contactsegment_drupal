<?php

function pum_contactsegment_drupal_webform_submission_insert($node, $submission) {
    $contactSegment = new WebformContactSegment($node->nid, $submission->sid);
    $contactSegment->save();
}

function pum_contactsegment_drupal_webform_submission_update($node, $submission) {
    $contactSegment = new WebformContactSegment($node->nid, $submission->sid);
    $contactSegment->save();
}

function pum_contactsegment_drupal_form_webform_component_edit_form_alter(&$form, &$form_state) {
    $component = $form_state['build_info']['args'][1];
    if (!in_array($component['type'], array('select'))) {
        return;
    }

    if (!isset($form['#node']->webform_civicrm)) {
        return;
    }

    $form['webform_civicrm_contactsegment'] = array(
        '#type' => 'fieldset',
        '#title' => t('CiviCRM Contact segment'),
        '#weight' => (isset($form['items']['weight']) ? $form['items']['weight'] - 1 : 1),
    );
    $form['webform_civicrm_contactsegment']['enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Fill this field with sectors'),
        '#description' => t("The dropdown is filled with sectors"),
        '#default_value' => _pum_contactsegment_drupal_webform_enabled($component),
    );
    $form['webform_civicrm_contactsegment']['role'] = array(
        '#type' => 'select',
        '#title' => t('Which role of contactsegment should this be saved'),
        '#options' => pum_contactsegment_drupal_get_roles(),
        '#default_value' => _pum_contactsegment_drupal_webform_get_role($component),
        '#states' => array(
            'invisible' => array(
                ':input[name="webform_civicrm_contactsegment[enabled]"]' => array('checked' => false),
            ),
        ),
    );
    $contact_options = array();
    foreach($form['#node']->webform_civicrm['data']['contact'] as $key => $contact) {
        $contact_options[$key] = $contact['contact'][1]['webform_label'];
    }
    $form['webform_civicrm_contactsegment']['contact'] = array(
        '#type' => 'select',
        '#title' => t('Save contactsegment at contact'),
        '#options' => $contact_options,
        '#multiple' => true,
        '#default_value' => _pum_contactsegment_drupal_webform_get_contact($component),
        '#states' => array(
            'invisible' => array(
                ':input[name="webform_civicrm_contactsegment[enabled]"]' => array('checked' => false),
            ),
        ),
    );

    $form['items']['#states']['invisible'][':input[name="webform_civicrm_contactsegment[enabled]"]'] = array('checked' => true);

    if (_pum_contactsegment_drupal_webform_enabled($component)) {
        $form['items']['options']['option_settings']['options_source']['#default_value'] = 'contactsegment';
    }
}

function pum_contactsegment_drupal_webform_component_presave(&$component) {
    if (!isset($component['webform_civicrm_contactsegment']['enabled'])) {
        return;
    }
    $component['extra']['webform_civicrm_contactsegment_enabled'] = $component['webform_civicrm_contactsegment']['enabled'] ? true : false;
    $component['extra']['webform_civicrm_contactsegment_role'] = $component['webform_civicrm_contactsegment']['role'];
    $component['extra']['webform_civicrm_contactsegment_contacts'] = serialize($component['webform_civicrm_contactsegment']['contact']);

    if ($component['extra']['webform_civicrm_contactsegment_enabled']) {
        $component['extra']['options_source'] = 'contactsegment';
    }
}

function pum_contactsegment_drupal_get_role_name($value) {
    $civicoop_segment_role_option_group = civicrm_api3('OptionGroup', 'getvalue', array('name' => 'civicoop_segment_role', 'return' => 'id'));
    return civicrm_api3('OptionValue', 'getvalue', array('option_group_id' => $civicoop_segment_role_option_group, 'value' => $value, 'return' => 'name'));
}

function pum_contactsegment_drupal_has_segment_active_role($role, $segment_id, $contact_id, $start_date) {
    $params['start_date'] = $start_date->format('Ymd');
    $params['role'] = $role;
    $params['segment_id'] = $segment_id;
    $params['contact_id'] = $contact_id;
    return CRM_Contactsegment_Utils::activeCurrentContactSegmentForRole($params);
}

function pum_contactsegment_drupal_is_role_unique($role_name, $segment_type='parent') {
    $segmentSettings = civicrm_api3('SegmentSetting', 'Getsingle', array());
    if ($segment_type == 'child') {
        return $segmentSettings['child_roles'][$role_name]['unique'];
    } else {
        return $segmentSettings['parent_roles'][$role_name]['unique'];
    }
}

function pum_contactsegment_drupal_is_parent_role($role_name) {
    civicrm_initialize();
    $segment_settings = civicrm_api3('SegmentSetting', 'get', array());
    $segment_settings = reset($segment_settings['values']);
    if (isset($segment_settings['parent_roles'][$role_name])) {
        return true;
    }
    return false;
}

function pum_contactsegment_drupal_is_child_role($role_name) {
    civicrm_initialize();
    $segment_settings = civicrm_api3('SegmentSetting', 'get', array());
    $segment_settings = reset($segment_settings['values']);
    if (isset($segment_settings['child_roles'][$role_name])) {
        return true;
    }
    return false;
}

function pum_contactsegment_drupal_get_roles() {
    civicrm_initialize();
    $civicoop_segment_role_option_group = civicrm_api3('OptionGroup', 'getvalue', array('name' => 'civicoop_segment_role', 'return' => 'id'));
    $civicoop_segment_role_option_values = civicrm_api3('OptionValue', 'get', array('option_group_id' => $civicoop_segment_role_option_group));
    $roles = array();
    foreach($civicoop_segment_role_option_values['values'] as $role) {
        $roles[$role['value']] = $role['label'];
    }
    return $roles;
}

function pum_contactsegment_drupal_options($component, $flat, $arguments) {
    $role = _pum_contactsegment_drupal_webform_get_role($component);
    return pum_contactsegment_drupal_get_segment_tree($role);
}

function pum_contactsegment_drupal_webform_select_options_info() {
    $items = array();

    $items['contactsegment'] = array(
        'title' => t('Sectoren'),
        'options callback' => 'pum_contactsegment_drupal_options',
    );

    return $items;
}

function pum_contactsegment_drupal_get_segment_tree($role) {
    civicrm_initialize();
    if ($role) {
        $role_name = pum_contactsegment_drupal_get_role_name($role);
        $include_parents = pum_contactsegment_drupal_is_parent_role($role_name);
        $include_children = pum_contactsegment_drupal_is_child_role($role_name);
    } else {
        $include_parents = true;
        $include_children = true;
    }
    $parent_segments = civicrm_api3('Segment', 'get', array('parent_id' => 'null', 'option.limit' => 99999));
    $areas_of_expertise = array();
    foreach($parent_segments['values'] as $parent) {
        $children = civicrm_api3('Segment', 'get', array('parent_id' => $parent['id'], 'option.limit' => 99999));
        if ($include_children && count($children['values'])) {
            foreach($children['values'] as $child) {
                $areas_of_expertise[$parent['label']][$child['id']] = $child['label'];
            }
        } elseif ($include_parents) {
            $areas_of_expertise[$parent['id']] = $parent['label'];
        }
    }
    return $areas_of_expertise;
}

function _pum_contactsegment_drupal_webform_enabled(array $component) {
    $enabled = false;
    if (isset($component['extra']['webform_civicrm_contactsegment_enabled'])) {
        $enabled = (bool) $component['extra']['webform_civicrm_contactsegment_enabled'];
    }
    return $enabled;
}

function _pum_contactsegment_drupal_webform_get_contact(array $component) {
    $contacts = array();
    if (!empty($component['extra']['webform_civicrm_contactsegment_contacts'])) {
        $contacts = unserialize($component['extra']['webform_civicrm_contactsegment_contacts']);
    }
    return $contacts;
}

function _pum_contactsegment_drupal_webform_get_role(array $component) {
    $role = false;
    if (isset($component['extra']['webform_civicrm_contactsegment_role'])) {
        $role = $component['extra']['webform_civicrm_contactsegment_role'];
    }
    return $role;
}

function pum_contactsegment_drupal_enable() {
    $maxWeight = db_query("SELECT MAX(weight) FROM {system} where type = 'module' AND (name = 'webform_civicrm') ")->fetchField();
    $maxWeight++;

    //make sure that our module has a higher weight than the civicrm and civicrm_entity module
    //if not our changes to the available fields for views wont occur
    //because the hook should be runned after the civicrm and civcirm_entity has runned their relevant hooks
    db_update('system')
        ->fields(array('weight' => $maxWeight))
        ->condition('type', 'module')
        ->condition('name', 'pum_contactsegment_drupal')
        ->execute();
}